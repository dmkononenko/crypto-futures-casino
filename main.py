#!/usr/bin/env python3
"""
Trading Randomizer - Intelligent Crypto Trading Recommendations
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç CoinGecko API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import json
import random
from datetime import datetime
from typing import Dict, List
from api_client import coingecko_client
from analyzer import technical_analyzer
from config import TICKERS, TICKER_MAPPING, LEVERAGES, DIRECTIONS

class TradingRecommendationSystem:
    def __init__(self):
        self.results_file = "results.md"
        
    def get_smart_recommendation(self, preferred_ticker: str = None) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —É–º–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko...")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if preferred_ticker and preferred_ticker.upper() in TICKER_MAPPING:
            selected_ticker = preferred_ticker.upper()
            coin_id = TICKER_MAPPING[selected_ticker]
            tickers_to_analyze = [coin_id]
        else:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π
            tickers_to_analyze = TICKERS
            selected_ticker = None
        
        best_recommendation = None
        best_score = 0
        
        for coin_id in tickers_to_analyze:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            historical_data = coingecko_client.get_historical_data(coin_id, days=7)
            
            if not historical_data:
                continue
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            recommendation = technical_analyzer.get_recommendation_score(historical_data)
            
            if recommendation['confidence'] > best_score:
                best_score = recommendation['confidence']
                best_recommendation = recommendation
                if not selected_ticker:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª —Ç–∏–∫–µ—Ä–∞ –ø–æ coin_id
                    selected_ticker = next(
                        (symbol for symbol, cid in TICKER_MAPPING.items() if cid == coin_id),
                        coin_id.upper()
                    )
        
        if not best_recommendation:
            return self._get_fallback_recommendation()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price_data = coingecko_client.get_current_prices([TICKER_MAPPING[selected_ticker]])
        current_price = 0
        if current_price_data and TICKER_MAPPING[selected_ticker] in current_price_data:
            current_price = current_price_data[TICKER_MAPPING[selected_ticker]]['usd']
        
        return {
            'ticker': selected_ticker,
            'direction': best_recommendation['direction'],
            'leverage': f"x{best_recommendation['leverage']}",
            'confidence': best_recommendation['confidence'],
            'reasoning': best_recommendation['reasoning'],
            'current_price': current_price,
            'rsi': best_recommendation['rsi'],
            'volatility': best_recommendation['volatility'],
            'trend': best_recommendation['trend'],
            'price_change_24h': best_recommendation['price_change_24h']
        }
    
    def get_random_recommendation(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)"""
        ticker = random.choice(list(TICKER_MAPPING.keys()))
        leverage = f"x{random.choice(LEVERAGES)}"
        direction = random.choice(DIRECTIONS)
        
        return {
            'ticker': ticker,
            'direction': direction,
            'leverage': leverage,
            'confidence': random.randint(30, 70),
            'reasoning': '–°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
            'current_price': 0,
            'rsi': 50,
            'volatility': 0,
            'trend': 'UNKNOWN',
            'price_change_24h': 0
        }
    
    def _get_fallback_recommendation(self) -> Dict:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å API"""
        return {
            'ticker': 'BTC',
            'direction': 'LONG',
            'leverage': 'x5',
            'confidence': 40,
            'reasoning': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (–ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö)',
            'current_price': 0,
            'rsi': 50,
            'volatility': 0,
            'trend': 'UNKNOWN',
            'price_change_24h': 0
        }
    
    def format_recommendation(self, rec: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        confidence_emoji = "üî•" if rec['confidence'] > 70 else "‚ö°" if rec['confidence'] > 50 else "üéØ"
        
        output = f"""
## {confidence_emoji} **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ {datetime.now().strftime('%d.%m.%Y')}:**

### **{rec['ticker']} + {rec['leverage']} + {rec['direction']}**

**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {rec['confidence']:.1f}%
**–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** ${rec['current_price']:.4f} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {rec['price_change_24h']:+.1f}%)

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**
- RSI: {rec['rsi']:.1f}
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {rec['volatility']:.1f}%
- –¢—Ä–µ–Ω–¥: {rec['trend']}

**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {rec['reasoning']}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ:**
"""
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏
        if rec['confidence'] > 70:
            output += "- –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 3-5% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        elif rec['confidence'] > 50:
            output += "- –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 2-3% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        else:
            output += "- –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
        leverage_num = int(rec['leverage'][1:])
        if leverage_num >= 20:
            output += "- –°—Ç–æ–ø-–ª–æ—Å—Å: 2-3%\n- –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 5-10%\n"
        elif leverage_num >= 10:
            output += "- –°—Ç–æ–ø-–ª–æ—Å—Å: 4-6%\n- –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 10-20%\n"
        else:
            output += "- –°—Ç–æ–ø-–ª–æ—Å—Å: 5-8%\n- –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 15-25%\n"
        
        return output

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system = TradingRecommendationSystem()
    
    print("üöÄ Trading Randomizer - Intelligent Recommendations")
    print("=" * 50)
    
    while True:
        print("\nüìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –£–º–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞)")
        print("2. –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è") 
        print("3. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞")
        print("4. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == "1":
            print("\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫...")
            recommendation = system.get_smart_recommendation()
            print(system.format_recommendation(recommendation))
            
        elif choice == "2":
            recommendation = system.get_random_recommendation()
            print(system.format_recommendation(recommendation))
            
        elif choice == "3":
            print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: {', '.join(TICKER_MAPPING.keys())}")
            ticker = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ").strip().upper()
            if ticker in TICKER_MAPPING:
                print(f"\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {ticker}...")
                recommendation = system.get_smart_recommendation(ticker)
                print(system.format_recommendation(recommendation))
            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä!")
                
        elif choice == "4":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
