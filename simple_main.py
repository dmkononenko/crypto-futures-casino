#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Trading Randomizer –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å demo API –∫–ª—é—á–æ–º
"""

import random
from datetime import datetime
from typing import Dict, List
from api_client import coingecko_client
from config import TICKER_MAPPING, LEVERAGES, DIRECTIONS

class SimpleTradingRecommendationSystem:
    def __init__(self):
        self.results_file = "results.md"
        
    def get_market_based_recommendation(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
        all_coin_ids = list(TICKER_MAPPING.values())
        market_data = coingecko_client.get_current_prices(all_coin_ids)
        
        if not market_data:
            return self._get_fallback_recommendation()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        opportunities = []
        
        for symbol, coin_id in TICKER_MAPPING.items():
            if coin_id not in market_data:
                continue
                
            data = market_data[coin_id]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            score = self._calculate_simple_score(data)
            
            opportunities.append({
                'ticker': symbol,
                'coin_id': coin_id,
                'data': data,
                'score': score
            })
        
        if not opportunities:
            return self._get_fallback_recommendation()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ —Ç–æ–ø-5
        opportunities.sort(key=lambda x: x['score'], reverse=True)
        top_opportunities = opportunities[:5]  # –¢–æ–ø-5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–∑ –ª—É—á—à–∏—Ö
        selected_opportunity = random.choice(top_opportunities)
        
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(opportunities)} –∞–∫—Ç–∏–≤–æ–≤, –≤—ã–±—Ä–∞–Ω {selected_opportunity['ticker']} (—Å–∫–æ—Ä: {selected_opportunity['score']:.1f})")
        
        return self._create_recommendation(selected_opportunity)
    
    def _calculate_simple_score(self, coin_data: Dict) -> float:
        """–ü—Ä–æ—Å—Ç–æ–π —Å–∫–æ—Ä–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        base_score = random.uniform(45, 55)  # –°–ª—É—á–∞–π–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        
        # –ê–Ω–∞–ª–∏–∑ 24-—á–∞—Å–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        price_change_24h = coin_data.get('usd_24h_change', 0)
        
        # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞
        if abs(price_change_24h) > 8:
            base_score += 20  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        elif abs(price_change_24h) > 4:
            base_score += 15  # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        elif abs(price_change_24h) > 2:
            base_score += 10  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        else:
            base_score += 5   # –û—á–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        volume_24h = coin_data.get('usd_24h_vol', 0)
        if volume_24h > 1000000000:  # > 1B
            base_score += 10  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º = –±–æ–ª—å—à–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        elif volume_24h > 100000000:  # > 100M
            base_score += 5
        
        # –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)
        market_cap = coin_data.get('usd_market_cap', 0)
        if market_cap > 50000000000:  # > 50B - —Ç–æ–ø –∞–∫—Ç–∏–≤—ã
            base_score += 8
        elif market_cap > 10000000000:  # > 10B
            base_score += 5  # –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        base_score += random.uniform(-10, 15)
        
        return max(base_score, 20)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä 20
    
    def _create_recommendation(self, opportunity: Dict) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        data = opportunity['data']
        ticker = opportunity['ticker']
        
        price_change_24h = data.get('usd_24h_change', 0)
        current_price = data.get('usd', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if price_change_24h < -5:
            direction = 'LONG'
            reasoning = f"–ø–∞–¥–µ–Ω–∏–µ –Ω–∞ {abs(price_change_24h):.1f}% –∑–∞ 24—á - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç—Å–∫–æ–∫–∞"
        elif price_change_24h > 8:
            direction = 'SHORT'  
            reasoning = f"—Ä–æ—Å—Ç –Ω–∞ {price_change_24h:.1f}% –∑–∞ 24—á - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
        else:
            direction = random.choice(['LONG', 'SHORT'])
            reasoning = f"—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ({price_change_24h:+.1f}%), —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
        
        # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–ª–µ—á–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = min(opportunity['score'], 100)  # –ú–∞–∫—Å–∏–º—É–º 100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        
        if confidence >= 100:
            target_leverage = random.randint(75, 100)
        elif confidence >= 90:
            target_leverage = 50
        elif confidence >= 80:
            target_leverage = 25
        else:
            # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –æ—Ç x2 –¥–æ x25 –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ < 80%
            target_leverage = 2 + (confidence / 80) * (25 - 2)

        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–ª–µ—á–æ
        leverage = min(LEVERAGES, key=lambda x: abs(x - target_leverage))

        return {
            'ticker': ticker,
            'direction': direction,
            'leverage': f"x{leverage}",
            'confidence': confidence,
            'reasoning': reasoning,
            'current_price': current_price,
            'price_change_24h': price_change_24h,
            'volume_24h': data.get('usd_24h_vol', 0),
            'market_cap': data.get('usd_market_cap', 0)
        }
    
    def _get_fallback_recommendation(self) -> Dict:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"""
        ticker = random.choice(list(TICKER_MAPPING.keys()))
        leverage = random.choice(LEVERAGES)
        direction = random.choice(DIRECTIONS)
        
        return {
            'ticker': ticker,
            'direction': direction,
            'leverage': f"x{leverage}",
            'confidence': 40,
            'reasoning': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API)',
            'current_price': 0,
            'price_change_24h': 0,
            'volume_24h': 0,
            'market_cap': 0
        }
    
    def format_recommendation(self, rec: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        confidence_emoji = "üî•" if rec['confidence'] > 70 else "‚ö°" if rec['confidence'] > 50 else "üéØ"
        
        output = f"""
## {confidence_emoji} **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ {datetime.now().strftime('%d.%m.%Y')}:**

### **{rec['ticker']} + {rec['leverage']} + {rec['direction']}**

**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {rec['confidence']:.1f}%
**–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** ${rec['current_price']:.4f}
**–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:** {rec['price_change_24h']:+.1f}%

**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {rec['reasoning']}

**–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
"""
        
        if rec['volume_24h'] > 0:
            output += f"- –û–±—ä–µ–º 24—á: ${rec['volume_24h']:,.0f}\n"
        if rec['market_cap'] > 0:
            output += f"- –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø: ${rec['market_cap']:,.0f}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ
        leverage_num = int(rec['leverage'][1:])
        if rec['confidence'] > 70:
            output += "\n**–¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            output += "- –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 3-4% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        elif rec['confidence'] > 50:
            output += "\n**–¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n" 
            output += "- –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 2-3% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        else:
            output += "\n**–¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            output += "- –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n"
        
        if leverage_num >= 20:
            output += "- –°—Ç–æ–ø-–ª–æ—Å—Å: 2-3%\n- –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 5-10%\n"
        elif leverage_num >= 10:
            output += "- –°—Ç–æ–ø-–ª–æ—Å—Å: 4-6%\n- –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 10-15%\n"
        else:
            output += "- –°—Ç–æ–ø-–ª–æ—Å—Å: 5-8%\n- –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 15-25%\n"
        
        return output

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system = SimpleTradingRecommendationSystem()
    
    print("üöÄ Trading Randomizer - Market Based Recommendations")
    print("=" * 55)
    
    while True:
        print("\nüìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–∫–∞")
        print("2. –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            print("\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            recommendation = system.get_market_based_recommendation()
            print(system.format_recommendation(recommendation))
            
        elif choice == "2":
            fallback = system._get_fallback_recommendation()
            print(system.format_recommendation(fallback))
            
        elif choice == "3":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
